syntax = "proto3";

package proto;

import "scheduler_message.proto";

message GetSystemInfoRequest {}
message GetSystemInfoResponse {
  string build_time = 1;
  string commit = 2;
  bool debug_enabled = 3;
  bool frontend_enabled = 4;
  string semver = 5;
}

message ListSchedulesRequest {}
message ListSchedulesResponse {
  map<string, Schedule> schedules = 1;
  repeated string order = 2;
}

message ListEmployeesRequest {}
message ListEmployeesResponse { map<string, Employee> employees = 1; }

message AddEmployeeRequest {
  string name = 1;
  string notes = 2;
  string start_date = 3;
  // a mapping of date in format mm-dd-yyyy with time range as the value
  // in format 00:00-00:00 when the employee will not be able to be scheduled
  // example key: 06-05-2020 -> value: 10:00-14:00
  map<string, string> unavailability = 4;
  // a map of position ids that the employee is eligible for
  map<string, bool> positions = 5;
  // preferences can be used to weight employees in scheduling
  // the key of the dictionary is the preference type (e.g POSITION) and the
  // value can be the current setting (e.g key: preferred_position -> value:
  // baker)
  // TODO(clintjedwards): Create enum values for preferences type
  map<string, string> preferences = 6;
}
message AddEmployeeResponse { Employee employee = 1; }

message GetEmployeeRequest { string id = 1; }
message GetEmployeeResponse { Employee employee = 1; }

message ListPositionsRequest {}
message ListPositionsResponse { map<string, Position> positions = 1; }

message AddPositionRequest {
  string primary_name = 1;
  string secondary_name = 2;
  string description = 3;
}
message AddPositionResponse { Position Position = 1; }

message GetPositionRequest { string id = 1; }
message GetPositionResponse { Position Position = 1; }

message GenerateScheduleRequest {
  // format is mm-dd-yyyy
  string start = 1;
  // how many days from the start date to generate
  uint32 length = 2;
  // Program is a mapping which allows users to set which positions and which
  // shifts are available for scheduling on certain days. Days left empty will
  // not be scheduled.
  Program program = 3;
  // preferences can be used to weight employees in scheduling
  // the key of the dictionary is the preference type (e.g POSITION) and the
  // value can be the current setting (e.g key: prefer_more_experience -> value:
  // true)
  map<string, string> preferences = 4;
  // the employees to include in the generated schedule, if this is empty, all
  // employees in scheduler settings will be included
  repeated string employee_filter = 5;
}

message GenerateScheduleResponse { Schedule schedule = 1; }

message CommitScheduleRequest {}
message CommitScheduleResponse {}
