syntax = "proto3";

package proto;

// Employee
message Employee {
  string id = 1;
  string name = 2;
  string notes = 3;
  string start_date = 4;
  // a mapping of date in format mm-dd-yyyy with time range as the value
  // in format 00:00-00:00 when the employee will not be able to be scheduled
  // example key: 06-05-2020 -> value: 10:00-14:00
  map<string, string> unavailability = 5;
  // positions that the employee is eligible for
  map<string, bool> positions = 6;
  // preferences can be used to weight employees in scheduling
  // the key of the dictionary is the preference type (e.g POSITION) and the
  // value can be the current setting (e.g key: preferred_position -> value:
  // baker)
  map<string, string> preferences = 7;
  // Time created in epoch
  int64 created = 8;
  // Time modified in epoch
  int64 modified = 9;
}

message Schedule {
  string start_date = 1;
  string end_date = 2;
  enum Status {
    UNKNOWN = 0;
    PENDING = 1;
    FINAL = 2;
  }
  Status status = 3;
  GenerateScheduleSettings settings = 4;
}

message SchedulerSettings { repeated Position positions = 1; }

// GenerateScheduleSettings contains per schedule settings
message GenerateScheduleSettings {
  // each day will have multiple positions, each position might have one or more
  // shifts
  PositionShiftMap position_shift_map = 1;
  // preferences can be used to weight employees in scheduling
  // the key of the dictionary is the preference type (e.g POSITION) and the
  // value can be the current setting (e.g key: prefer_more_experience -> value:
  // true)
  map<string, string> preferences = 2;
  // the employees to include in the generated schedule, if this is empty, all
  // employees in scheduler settings will be included
  repeated string employee_filter = 3;
}

message Position {
  string id = 1;
  string primary_name = 2;
  string secondary_name = 3;
  string description = 4;
}

message PositionShiftMap {
  // A mapping of a position id to an arbitrary number of shifts. This allows
  // for positions and shifts to be variable depending on the day of the week
  map<string, Shifts> monday = 1;
  map<string, Shifts> tuesday = 2;
  map<string, Shifts> wednesday = 3;
  map<string, Shifts> thursday = 4;
  map<string, Shifts> friday = 5;
  map<string, Shifts> saturday = 6;
  map<string, Shifts> sunday = 7;
}

message Shifts { repeated Shift shifts = 1; }

// Shift represents a time period in which an employee will work. The format is
// a 4 digit time code for a 24 hour clock
//
// example: 4:00am == 0400, 6:30pm == 1830
message Shift {
  string start_time = 1;
  string end_time = 2;
  string description = 3;
  string employee = 4; // id
}
